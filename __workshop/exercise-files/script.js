// add js here
// get some important nodes
const h_node = getByTag("head")[0];
const b_node = getByTag("body")[0];
const w_node = getById("wrapper");
// get other nodes
const form_node = getByTag("form")[0];
const btn_submit = getById("submit-btn");
const btn_clear = getById("clear-btn");
const check_node = getById("agree");
const paw_node = getById("password");
const paw_cmf_node = getById("password-cmf");
const error_node = getById("error-box");
const all_input = getByTag("input");

// not spcified, so I would allow only one error msg displayed on screen :D (because I am lazy)
let error_sub_node = undefined; // place-holder for subnodes
let cur_error_node = undefined; // placeholder for current error node

// Ths is unpleasant to make I am sure there should be pacakge to do this
const noun_list = [
"screw","chess","clam","watch", "time",
"insurance","meat","dad","impulse","mask",
"sofa","stove","sleet","cars","range",
"authority","wren","bottle","wrist","corn",
"baseball","design","step","letters","rice",
"salt","judge","business","parcel","color",
"dinosaurs","celery","truck","juice","giraffe",
"cherry","aftermath","cobweb","trick","eggnog",
"end","club","drop","jam","hole",
"robin","crow","advice","birth","doctor"
];      // generated by https://www.randomlists.com/nouns?dup=false&qty=50

// the messages
let unchecked_msg = "Please read and agree to ters of service before submit!";
let paw_error_msg = "Your password is too short! Please provide a password that is at least 10 characters long.";
let paw_cmf_error_msg = "Your conform password is diffrent from the password";



// ==================== Exercise4 ====================

// add event listener to form submission
form_node.addEventListener("submit", validation);

// add the clear eventlistener
btn_clear.addEventListener("click", clearForm);


// ==================== functions used ====================
// function to suggest a new password
function suggestPaw(){
    // generate a random number 4 or 5. be number of letters selected
    let k = Math.round(Math.random() + 4);
    // get the nouns
    let str = [];
    for(let n=0; n<k ;n++){
        // generate a random number in list
        let tmp = Math.floor(Math.random()*noun_list.length);
        str.push(noun_list[tmp]);
    }
    return str.join("-");
}

// function to clear all inputs and also the check box
function clearForm(){
    form_node.reset();      // used to reset elements in form
}
// function to validate all info
function validation(){
    event.preventDefault();
    // Terms validation
    if(!val_checkBox(check_node)){
        // when it's false alert
        window.alert(unchecked_msg);
        return;
    }
    // password validation
    if(!val_pass(paw_node)){
        
        // add pink error box at the end (positin not specified)
        clearErrors(error_sub_node)
        cur_error_node = paw_node;

        // change the error msg.
        paw_error_msg+=`How about ${suggestPaw()}?`;
        error_sub_node = createNewNode("DIV", paw_error_msg, error_node, "error-msg");
        // change the color of the border
        
        paw_node.classList.add("error-input");
        paw_node.focus();
        return;
    }
    // passwor confirmed
    if(!val_pass_cmf(paw_node, paw_cmf_node)){
        
        // add pink error box at the end (positin not specified)
        clearErrors(error_sub_node)
        cur_error_node = paw_cmf_node;
        error_sub_node = createNewNode("DIV", paw_cmf_error_msg, error_node, "error-msg");
        // change the color of the border
        paw_cmf_node.classList.add("error-input");
        paw_cmf_node.focus();
        return;
    }

    clearErrors(error_sub_node)
    alert("Success!");
    return true;

}
// checkbox
function val_checkBox(ele_cb){
    return ele_cb.checked;
}
function val_pass(ele_pass){
    // at least 10 characters
    return ele_pass.value.length>=10;
}
function val_pass_cmf(ele_pass, ele_pass_cmf){
    return ele_pass.value === ele_pass_cmf.value;
}
function clearErrors(ele_error){
    ele_error = getByClass("error-msg")[0];
    // clear error message
    if(ele_error!==undefined){
        ele_error.remove();
        ele_error = undefined;
    }
    // clear error format
    if(cur_error_node!==undefined){
        // remove the style list
        cur_error_node.classList.remove("error-input");
        unfocus();        
        cur_error_node=undefined
    }
}
function unfocus(){
    let pseudo = createNewNode("DIV", "", b_node, undefined);
    pseudo.focus();
    b_node.removeChild(pseudo);
}

// ==================== functions to use ====================
// I wrote these for a previous workshop so I just copy-pasted.
// and I added a few more
// NOTE: I wrote these assuming that the inputs will hit a target, therefore only type checking and no exception handling.
function getByTag(tagName){
    if(typeof(tagName)!=="string"){
        alert("Not correct tag name!");
    }   

    // return the node
    return document.getElementsByTagName(tagName.toUpperCase());
}
function getById(id){
    if(typeof(id)!=="string"){
        alert("Not correct id!");
    }   

    // return the node
    return document.getElementById(id);
}
function getByClass(className){
    if(typeof(className)!=="string"){
        alert("Not correct class!");
    }   

    // return the node, or an array of node depending on the items
    return document.getElementsByClassName(className);
}


function createNewNode(type, text, parent, className){
    // checking input
    if(typeof(type)!=="string"){
    alert("NOT VALID TYPE!!!");
    }

    // create basic element
    let ele = document.createElement(type);

    // handle inner text
    let t = "";
    if(text!==undefined){
        t_node = document.createTextNode(text);
        ele.appendChild(t_node);
    }

    // handle parent
    if(parent!==undefined){
        parent.appendChild(ele);
    }

    // handle className
    if(className!==undefined){
        ele.classList.add(className);
    }

    // return the element if needed.
    return ele; 
}
function createImgNode(img_link, alt_text, parent, className){
    let image = createNewNode("img", undefined, parent, className)

    // handle src link
    if(img_link!==undefined){
    image.src = img_link;       // the src link
    }
    // handle alt text
    if(alt_text!==undefined){
    image.alt=alt_text;     // the alt property
    }

    // return image node if needed
    return image;  
}
function createAnchorNode(href_input, text, parent, className){
    let a_node = createNewNode("A", text, parent, className);

    // handle href
    if(href_input!==undefined){
    a_node.href = href_input;
    }

    // return anchor node if needed
    return a_node;
}
function createStyleNode(href_input, text, parent){
    let style_node = createNewNode("link", text, parent, undefined);

    //handle rel
    style_node.rel = "stylesheet";

    // handle href
    if(href_input!==undefined){
        style_node.href = href_input;
    }

    // return node if needed
    return style_node;
}
function createLinkNode(href_input, text, parent, className){
    let link_node = createNewNode("link", text, parent, className);

    // handle href
    if(href_input!==undefined){
        link_node.href = href_input;
    }

    // return node if needed
    return link_node;
}
function createScriptNode(src_input, type, parent){
    let script_node = createNewNode("script", undefined, parent, undefined);

    // handle type
    if(type!==undefined){
    script_node.type=type;
    }
    // handle href
    if(src_input!==undefined){
    script_node.href = src_input;
    }

    // return node if needed
    return style_node;
}

